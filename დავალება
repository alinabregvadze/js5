დავალება:
1. HTML ფაილში შექმენით <div id="slider"></div> ელემენტი. CSS -დან განუსაზღვრეთ შემდეგი სტილები:
#slider {
position: relative;
width: 100%;
height: 400px;
border: 1px solid #000;
overflow: hidden;
}


2. HTML ფაილში შექმენით <div id="rail"></div> ელემენტი რომელიც იქნება ზედა პუნქტში შექმნილი #slider ელემენტის შვილი. CSS -დან განუსაზღვრეთ შემდეგი სტილები:
#rail {
display: flex;
transition: all .3s;
}


3. ჯავასკრიპტში შექმენით სტრინგების მასივი images, რომელშიც მოათავსებთ სხვადასხვა სახის ფოტოს მისამართებს. ისევე როგორც ეს გავაკეთეთ ლექციაზე.


4. შექმენით ცვლადი slider რომელსაც მიანიჭებთ HTML ში შექმნილ #slider ელემენტს document.getElementById ფუნქციის გამოყენებით


5. შექმენით ცვლადი rail რომელსაც მიანიჭებთ HTML ში შექმნილ #rail ელემენტს document.getElementById ფუნქციის გამოყენებით

6. შექმენით ცვლადი currentPosition რომლის საწყისი მნიშვნელობა იქნება 0 და ცვლადი pageWidth საწყისი მნიშვნელობით 650


7. შექმენით ფუნქცია createSlide რომელიც პარამეტრად მიიღებს url სტრინგს, შექმნის div ელემენტს რომელსაც მიანიჭებს კლასს slide, ხოლო ამ ელემენტის backgroundImage -ს მიანიჭებს url პარამეტრის მნიშვნელობას როგორც ეს გავაკეთეთ ლექციაზე:  div.style.backgroundImage = 'url(' + url + ')'; და ბოლოს ამ ფუნქციამ უნდა დააბრუნოს შექმნილი div ელემენტი.


8. CSS -დან განუსაზღვრეთ .slide ელემენტს შემდეგი სტილები: 
.slide {
width: 650px;
height: 400px;
flex-shrink: 0;
background-position: center;
background-size: cover;
}


9. შექმენით ფუნქცია createSlides რომელიც for ით გაივლის მასივში images და თითოეულ ბიჯზე გამოიძახებს createSlide ფუნქციას, პარამეტრად მისცემს მასივის i-ურ ელემენტს და დაბრუნებულ div ელემენტს ჩაამატებს #rail ელემენტში. გამოიძახეთ createSlides ფუნქცია.


10. შექმენით ფუნქცია next რომელიც გაზრდის currentPosition ცვლადის მნიშვნელობას pageWidth მნიშვნელობით და გაუკეთებს rail ელემენტს ტრანსფორმს შემდეგნაირად:
rail.style.transform = 'translateX(-' + currentPosition + 'px)';



11. შექმენით ფუნქცია prev რომელიც შეამცირებს currentPosition ცვლადის მნიშვნელობას pageWidth მნიშვნელობით და გაუკეთებს rail ელემენტს ტრანსფორმს შემდეგნაირად:
rail.style.transform = 'translateX(-' + currentPosition + 'px)';


12. შექმენით ფუნქცია createNavigation რომელიც შექმნის Next და Prev ღილაკებს ზუსტად ისე როგორც ლექციაზე გავაკეთეთ. გამოიძახებს next და prev ფუნქციებს შესაბამისი ღილაკების დაჭერაზე. ჩაამატებს შექმნილ ღილაკებს #slider ელემენტში.


13. CSS დან განუსაზღვრეთ ღილაკებს შემდეგი სტილები:
.next {
position: absolute;
top: 0;
bottom: 0;
width: 50px;
height: 50px;
margin: auto;
right: 50px;
z-index: 2;
}


.prev {
position: absolute;
top: 0;
bottom: 0;
width: 50px;
height: 50px;
margin: auto;
left: 50px;
z-index: 2;
}


14. გამოიძახეთ createNavigation ფუნქცია.


15* დაამატეთ შემოწმება next და prev ფუნქციებში ისე, რომ როდესაც სლაიდები ბოლომდე გაისქროლება გადავიდეს მეორე ბოლოში. ანუ მარჯვნივ ბოლომდე გასვლის შემდეგ დაბრუნდეს საწყის პოზიციაზე, და მარცხნივ ბოლომდე გასვლის შემდეგ გადახტეს ბოლო პოზიციაზე. ჯამური სიგანის გასაგებად გამოიყენეთ: document.getElementById('rail').scrollWidth


16* setTimeout ფუნქციის გამოყენებით გააკეთეთ ისე, რომ ყოველ 5 წამში ავტომატურად ხდებოდეს next ფუნქციის გამოძახება და გადადიოდეს სლაიდერი შემდეგ ბიჯზე. როდესაც სლაიდერი გავა ბოლოში შემდეგი ბიჯი იქნება საწყის პოზიციაზე დაბრუნება.

17* მთლიანი კოდი მოაქციეთ ფუნქციაში createSlider ისე რომ გლობალური ცვლადები images, currentPosition, pageWidth, slider და rail აღმოჩნდეს ლოკალური ცვლადები ამ ფუნქციისა. ფუნქციამ უნდა დააბრუნოს ობიექტი, რომელსაც ექნება ორი მეთოდი next და prev და თითოეულის გამოძახებისას მოხდეს სლაიდერის გადაადგილება შესაბამისად.